---
title: "Lab2"
format: html
editor: visual
---

# Laboratorio 2

Es recomendable limpiar el ambiente al iniciar un nuevo laboratorio. Usamos el comando rm(list=ls()) desde la consola.

```{r}
rm(list=ls())
```

## Cargar librerías

Para cargar una librería y poder usarla usamos la función library.

```{r}
library(readr)
```

## Para leer una base de datos

```{r}
DF <- read_csv("Datos_Diversos.csv")
```

Importante: NO USAR JAMÁS la función read.csv de R básico.

Para ver el nombre de las variables que se tienen usamos la función names.

```{r}
names(DF)  # names devuelve el nombre de las variables del DataFrame
```

Lo primero que debemos hacer es cambiar el nombre de las variables. Se recomienda usar nombres sencillos, de una sola palabra, sin tildes, sin eñes, sin espacios en blanco.

Se recomienda usar la función rename de la librería dplyr para cambiar el nombre a las variables.

```{r}
library(plyr)
library(dplyr)
```

Ahora cambiemos el nombre de las variables.

```{r}
DFN <- dplyr::rename(DF, Periodo = 'Período', Seccion = 'Sección', Estatura = 'Estatura (cm)', Peso = 'Peso (kg)', Signo = 'Signo del zodiaco',Tiempo = 'Tiempo de reacción', Video = 'Juega videojuegos', Deporte = 'Hace deporte', Color = 'Color favorito', Zapato = 'Talla de zapato', Polo = 'Talla de polo', SO = 'Sistema operativo', Fecha = 'Fecha de nacimiento') 
```

Para ver el DataFrame:

```{r eval=FALSE, echo=FALSE}
DFN
```

Para saber cuántas observaciones o unidades muestrales se tienen, se puede usar la siguiente función.

```{r}
nrow(DFN)
```

Para saber cuántas columnas o variables tiene la base de datos.

```{r}
ncol(DFN)   # indica el número de variables que tiene la data 

dim(DFN) # devuelve el numero de observaciones x el numero de columnas
```

Para acceder al valor que tiene una posición particular en la data.

```{r}
DFN[3,6]  # devuelve el valor que tiene el DataFrame en la posición (3,6)
```

Para acceder a toda una fila de la data.

```{r}
DFN[3,]
```

Para acceder o ver toda una columna del DataFrame.

```{r}
DFN[,7]
```

Para saber cúantos datos faltantes (NA's) tiene el Dataframe:

```{r}
sum(is.na(DFN))
```

Si quisiéramos ver la cantidad de datos faltantes que hay y la cantidad de datos no faltantes que hay puedo usar la función table. Table da un resumen de los valores que toma is.na y cuánta cantidad hay de cada tipo.

```{r}
table(is.na(DFN))
```

```{r}
table(DFN$Sexo)
```

```{r}
table(DFN$Signo)
```

Para saber cuántas observaciones completas tiene la data.

```{r}
sum(complete.cases(DFN))
```

NOTA: Las dos últimas columnas (la 19 y la 20) tienen puros NA's, eso hace que no haya una sola observación completa. Esto es un error ya que si hubo personas que llenaron sus datos completos.

Hay funciones en R que tienen su negación (la ! antes de la función que se quiere usar es la negación de la misma). Por ejemplo, para ver cuántas observaciones incompletas se tienen.

```{r}
sum(!complete.cases(DFN))
```

## Limpieza de datos

Lo primero que debemos observar es que en el archivo Datos Diversos que llenamos solo habían 18 columnas (llegaban hasta la columna indicaciones), sin embargo el DataFrame tiene 20 columnas y todas con valores NA (la data se "embasuró" con 2 columnas vacías. También podemos observar que hay filas vacías entre la fila 1928 y 2223. Hay que eliminar tanto las columnas vacías como las filas vacías.

Primero eliminemos las columnas 19 y 20. Hagamos un resumen del DataFrame

```{r}
summary(DFN)
```

Para eliminar columnas usaremos la función select de la librería dplyr

```{r}
DFN <- select(DFN,-...19) #Se elimina la columna 19
DFN <- select(DFN,-...20) #Se elimina la columna 20
```

También se puede eliminar un rango de columnas, por ejemplo, queremos eliminar las columnas entre la columna A y la columna B

```{r}
#select(DFN,-a:-b)
```

Ahora eliminamos las filas vacías.

```{r}
v <- c(1:5) #crea el vector con elementos desde 1 hasta 5
v
```

```{r}
filas_a_eliminar <- c(1928:2223)
DFN <- DFN[-filas_a_eliminar,]
```

```{r}
DFN <- DFN[-1929,]
```

```{r}
sum(is.na(DFN)) #suma todos los NA en la data
```

```{r}
sum(complete.cases(DFN))
```

Noten que al eliminar las filas y columnas y vacías tenemos que las observaciones completas pasaron de 0 a 602

Hagamos un resumen de observaciones completas e incompletas.

```{r}
table(complete.cases(DFN))
```

## Limpieza de la variable Estatura

```{r}
summary(DFN$Estatura)
```

Claramente 1.2 y 1653 son datos atípicos irreales ya que ningún ser humano puede tener esas medidas. Veamos si hay pocos o muchos datos atípicos irreales.

```{r}
plot(DFN$Estatura)
```

```{r}
DFN[which(DFN$Estatura<100),5]
```

```{r}
table(DFN$Estatura<100)
```

```{r}
DFN$Estatura[DFN$Estatura < 100] <- NA
DFN$Estatura[DFN$Estatura > 273] <- NA
```

```{r}
summary(DFN$Estatura)
```

## Limpieza de la variable Video

```{r}
table(DFN$Video)
```

Claramente en este caso solo debieron haber dos posibles respuestas Si y No. Uniformemos esas respuestas.

```{r}
DFN$Video[DFN$Video %in% c("no","NO")] <- "No"
DFN$Video[DFN$Video %in% c("SI","sí","Sí","SÍ","si")] <- "Si"
```

```{r}
table(DFN$Video)
```

## Limpieza de la variable Peso

```{r}
table(DFN$Peso)
```

Sustituiremos por NA los "-" y el "90k" y redondear los valores al entero más cercano

```{r}
DFN$Video[DFN$Video %in% c("-","90k")] <- NA
DFN$Video <- as.numeric(DFN$Video)
DFN$Video <- round(DFN$Video)
```

## Limpieza de la variable Signo

```{r}
table(DFN$Signo)
```

```{r}
DFN$Signo[DFN$Signo %in% c("-","Ofiuco","Escorpio/Libra","Abril","No tengo", "Desconocido", "Leo ?")] <- NA

DFN$Signo[DFN$Signo %in% c("acuario","Acurio")] <- "Acuario"
DFN$Signo[DFN$Signo %in% c("Arias","aries")] <- "Aries"
DFN$Signo[DFN$Signo %in% c("cancer","cáncer","Cancer")] <- "Cáncer"
DFN$Signo[DFN$Signo %in% c("Capricorinio","capricornio","CApricornio","Capricornip","Capriorno","Capriornio","Caprocornio")] <- "Capricornio"
DFN$Signo[DFN$Signo %in% c("escorpio","Escorpion","eskorpio","Scorpio")] <- "Escorpio"
DFN$Signo[DFN$Signo %in% c("Gemenis","geminis","Geminis")] <- "Géminis"
DFN$Signo[DFN$Signo %in% c("leo")] <- "Leo"
DFN$Signo[DFN$Signo %in% c("libra","LIBRA")] <- "Libra"
DFN$Signo[DFN$Signo %in% c("picis","Picis","piscis","Pisicis","pisics","Pisis")] <- "Piscis"
DFN$Signo[DFN$Signo %in% c("sagitario","Sagitatio")] <- "Sagitario"
DFN$Signo[DFN$Signo %in% c("tauro")] <- "Tauro"
DFN$Signo[DFN$Signo %in% c("Viego","virgo","VIrgo")] <- "Virgo"
```

```{r}
table(DFN$Signo)
```

# Función Select

Selecciona columnas del dataframe

3.  Seleccionar por coincidencias de patrones

    ```{r}
    select(DFN, starts_with("Pe")) #selecciona de DFN las variables que comienzan con "Pe"

    select(DFN, ends_with("lo")) #selecciona de DFN las variables que terminan en "lo"

    select(DFN, contains("po")) #selecciona de DFN las variables que contienen "po"

    ```

# Función Filter

Selecciona filas del dataframe

```{r}
filter(DFN, Seccion==9)

```

```{r}
filter(DFN, Seccion==9.01)
filter(DFN, Seccion==9.01 & Periodo==2023-1)
filter(DFN, (Seccion == 9.01 | Seccion == 9) & Periodo == "2023-1")

filter(DFN, Seccion==9.01 & Edad %in% c(17,18) & Signo %in% c("Acuario","Tauro"))
```

# Mutate y Transmute

Sirve para crear nuevas variables (columnas)

```{r}
x1 <- c(1,2,3,4)
x2 <- c(2,3,4,8)
DF3 <- data.frame(x1,x2) # Crea un DataFrame con columnas x1 y x2

DF3 <- mutate(DF3, x3=x1+x2) # Genera una nueva columna x3 que es la suma de la columna x1 y x2

transmute(DF3, x4 = 2*x1 + x2 - x3) # Genera una nueva columna sin conservar las originales
```

# Arrange

Se utiliza para reordenar filas de un DataFrame de acuerdo a o más variables (columnas)

```{r}
arrange(DFN, Edad)
```

# Summarise

Con esta función podemos obtener determinados datos estadísticos de una variable

```{r}
DF3 %>% summarise(media = mean(x1)) # retorna un único valor que es la media de la variable x1
DF3 %>% summarise(maximo = max(x3)) # retorna un único valor que es el máximo de la variable x3
DF3 %>% summarise(nn=n()) #retorna un único valor que es el numero de filas del DF de DF3
```

# Pipe (%\>%)

Este operador es básico ya que permite encadenar llamadas o funciones para así realizar de forma sencilla transformaciones de datos complejos.

Lo que hace este operador es pasar el elemento que esta a su izquierda como un argumento de la función que tiene a la derecha

```{r}
DFN %>% filter(Edad>40)

```

# Group

Permite agrupar filas en función de una o varias condiciones.

```{r}
group_by(DFN, Sexo)
```

```{r}
DFN %>% filter(Edad>4) %>% group_by(Video) 
```

# Ifelse

La función ifelse nos permite vectorizar un condicional (if, else). En lugar de escribir una línea de código para cada comparación, podemos usar una sola llamada a esta función, que se aplicará a todos los elementos de un vector.

```{r}
v <- 1:10
ifelse(v<3, "T", "F")

ifelse(v %% 2 == 0, "Par", "Impar")
```

El primer termino es la condición, el segundo que se hace si es verdadero y el tercero que se hace si es falso

Tarea: Periodo if else, mutate
